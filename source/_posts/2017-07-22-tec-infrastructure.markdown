---
layout: post
title: "多人異步開發時會遇到問題會需要的基礎設施"
date: 2017-07-22 14:20:09 +0800
comments: true
categories: 
---

​	長期開發並維護一個產品跟短期衝刺生產出一個專案，最大的差別在於開發流程，專案是同步進行的，而產品開發實際上是異步進行的。

### 同步進行

專案規格一開始需求訪談確定產生完工作書名書後就要簽字畫押好，是不可以亂改的。所以開發者一開始就能清楚界定專案的範圍，大部分未知的風險比如技術瓶頸可以被事先預知，開發時間可以被事先規劃。所以實際上撰寫規格書界定專案範圍，實際開發最後到測試與驗收，流程上是以同步(sync)的方式進行。

### 異步進行

而大部分的產品因為想做的功能多，範圍大，一開始也就是先畫出WBS圖來大略上界定範圍，你很難在一開始就先寫好完整版規格書，界定出所有API。而是隨著時間發展，常常是先寫好幾個客戶緊急需要的模組，然後就出貨給客戶，之後陸續再Release新版補給客戶其他沒有那麼緊急或重要的功能給客戶。把時間來長就需要有能力能夠處理以下情況。

####緊急事件

然後如果有緊急狀況發生比如出貨的產品臨時被要求在上線前要提供若掃報告與修正，那這時後原先預定下一個版號要新增的功能叫要被置換成修正弱掃缺點。原本要被Merge回來的Feature支線就要暫緩，並且火速開一個Feature來修改弱點並發布版本。

#### 本版間的關係管理

隨著時間迭代，A客戶是0.8版，B客戶是0.9版，這時候怎麼從0.8升級到0.9？兩個版本之間又有什麼差別？如果是好幾10個版本分散在各地，你有辦法處理嗎？如果沒有搭配文件、程式碼版本控管、環境印象檔化，不用多久整個案子就會無法維護。

文件記錄各版本的Release note，並且要有規範，標明新功能和已知問題等。版本控管Git要有Git Flow如Release branch在程式標明版本號，和Tag標註方便切換不同版本。運用Docker把運行環境標準化，除了確保開發時與上線的反應相同，也避免環境升版降版時遺漏了設定造成錯誤。

#### 眾多協同開發會遇到的協作工具

Issue tracking、Git、Auto test、CI Server、Project Management Know How（WBS etc...）、Document Guideline等，以上這些就像是現代多人多Branch同時間異步協同開發所必備的基礎設施，少了這些要開發大型系統或隨著時間迭代成長的產品是不可能的事情，沒有這些整個技術Team無法持續成長，也絕對會欠下一堆技術債，累積到最後整個產品開發寸步難行，而對風險的忍受度異常的低，比如一個關鍵開發人員走了整個產品開發就無以為繼了。

