<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 良工巧匠集 | MR SHIH]]></title>
  <link href="http://mrshih.github.io/blog/categories/liang-gong-qiao-jiang-ji/atom.xml" rel="self"/>
  <link href="http://mrshih.github.io/"/>
  <updated>2015-12-23T10:43:35+08:00</updated>
  <id>http://mrshih.github.io/</id>
  <author>
    <name><![CDATA[施安宏]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[推播結合背景更新 - 良好的使用者體驗]]></title>
    <link href="http://mrshih.github.io/blog/2015/12/22/ios-background-mode-notification/"/>
    <updated>2015-12-22T20:36:49+08:00</updated>
    <id>http://mrshih.github.io/blog/2015/12/22/ios-background-mode-notification</id>
    <content type="html"><![CDATA[<p>試想一個情境是相簿APP在後台收到伺服器傳來愛人分享的最新照片，但使用者興沖沖的打開之後面對轉阿轉不停的Loading indicator圓圈圈，多麼令人掃興。 動通知但被動下載資料顯然不是一個好方法。</p>

<p>這個時候可以透過推播通知APP，並在背景讓程式預載相片，載好之後再通知使用者點開APP，立即可以看到所有相片，多棒的使用者體驗。</p>

<p>要不打擾到使用者偷偷通知手機要實作<code>Silent Notification</code>，很簡單，只要加上<code>content-available=1</code>，再來把<code>alert</code>,<code>badge</code>,<code>sound</code>全部留空就好，並且在Xcode的Capabilities->Background Modes->Remotes Notification這裡把選項打勾。</p>

<p>這時候在手機收到有<code>content-available=1</code>的推播，iOS就會在背景喚醒你的APP，並且呼叫下面方法讓你下載資料或做些事，下次使用者打開就可以看到更新的內容了：</p>

<p>```Objective-C
&ndash; (void)application:(UIApplication * <em>Nonnull)application didReceiveRemoteNotification:(NSDictionary * </em>Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult result))handler {</p>

<p>  // 下載資料&hellip;</p>

<p>  // Local Notification提示使用者下載好囉
  UILocalNotification *locNotification = [[UILocalNotification alloc] init];</p>

<pre><code>locNotification.alertBody = @"Data have arrived!";
[[UIApplication sharedApplication]presentLocalNotificationNow:locNotification];
</code></pre>

<p>  //回調系統下載好了
  handler(UIBackgroundFetchResultNewData);
}
```</p>

<blockquote><p>&hellip;the system launches your app (or wakes it from the suspended state) and puts it in the background state when a remote notification arrives. However, the system does not automatically launch your app if the user has force-quit it. In that situation, the user must relaunch your app or restart the device before the system attempts to launch your app automatically again&hellip;&hellip;</p>

<p>As soon as you finish processing the notification, you must call the block in the handler parameter or your app will be terminated. Your app has up to 30 seconds of wall-clock time to process the notification and call the specified completion handler block&hellip;.</p></blockquote>

<p>官方文件說有例外，就是使用者曾經手動殺掉過這個APP，奇怪的是在我的開發經驗裡面，就算使用者手動殺掉系統在收到推播之後還是會去喚醒這個APP。</p>

<p>然後系統大約會給你30的時間讓你去下載需要的資料到記憶體或硬碟，之後就必須要call handler<code>UIBackgroundFetchResult</code>告訴系統已經載入完畢。</p>

<p>如果成功下載了我們要的資料，就可以發一個LocalNotification來通知使用者來享用你剛下載好的檔案，一打開就有下載好的內容，多棒的使用者體驗啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS在不同ViewController指定Status Bar]]></title>
    <link href="http://mrshih.github.io/blog/2015/12/10/adjust-status-bar-style/"/>
    <updated>2015-12-10T01:36:49+08:00</updated>
    <id>http://mrshih.github.io/blog/2015/12/10/adjust-status-bar-style</id>
    <content type="html"><![CDATA[<p>查看文擋很容易發現viewController有個<code>preferredStatusBarStyle</code>接口，搭配語意明顯的<code>setNeedsStatusBarAppearanceUpdate</code>，看起來可以指定回調的<code>UIStatusBarStyle</code>比如白色與黑色。但時常調用了卻沒有回應。</p>

<p>這時候查一查文擋內相同Section附近的API會是個好習慣。在Managing the Status Bar裡發現下面這個接口：</p>

<p><code>Objective-C
- (UIViewController *)childViewControllerForStatusBarStyle;
</code></p>

<p>按照苹果官方的解释：</p>

<blockquote><p>If your container view controller derives its status bar style from one of its child view controllers, implement this method and return that child view controller. If you return nil or do not override this method, the status bar style for self is used. If the return value from this method changes, call the setNeedsStatusBarAppearanceUpdate method.</p></blockquote>

<p>調用<code>setNeedsStatusBarAppearanceUpdate</code>時，系統默認會去調用application.rootViewController的<code>preferredStatusBarStyle</code>方法，所以這時候當前自己的viewController的<code>preferredStatusBarStyle</code>方法根本不會被調用。</p>

<p>這個接口很重要，這種情況下<code>childViewControllerForStatusBarStyle</code>就有用了。一般我們常用navigationController作為rootViewController，利用此接口便可以很方便自訂各個viewController的statusBarStyle。 子類化一個navigationController，並且override<code>childViewControllerForStatusBarStyle</code></p>

<p>```Objective-C
&ndash; (UIViewController * _Nullable)childViewControllerForStatusBarStyle {</p>

<pre><code>return self.topViewController;
</code></pre>

<p>}
```</p>

<p>意思就是說不要調用我自己application.rootViewController（navigationController）的<code>preferredStatusBarStyle</code>方法，去調用｀childViewControllerForStatusBarStyle｀回傳的UIViewController的<code>preferredStatusBarStyle</code>。這裡回傳self.topViewController就可以保證當前顯示的viewController的<code>preferredStatusBarStyle</code>會被系統調用且正確的顯示。</p>
]]></content>
  </entry>
  
</feed>
