<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 良工巧匠集 | MR SHIH]]></title>
  <link href="http://sah.tw/blog/categories/liang-gong-qiao-jiang-ji/atom.xml" rel="self"/>
  <link href="http://sah.tw/"/>
  <updated>2016-08-12T01:00:54+08:00</updated>
  <id>http://sah.tw/</id>
  <author>
    <name><![CDATA[施安宏]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS 實作SlideMenu - 初探ViewController切換]]></title>
    <link href="http://sah.tw/blog/2016/01/08/first-presentation-flow/"/>
    <updated>2016-01-08T18:10:00+08:00</updated>
    <id>http://sah.tw/blog/2016/01/08/first-presentation-flow</id>
    <content type="html"><![CDATA[<p><img src="/images/2016-01-08-first-presentation-flow.jpg" />
所有關於ViewController切換的行為基本稱做為Model，Navegation特有的Push等等也是Model的分支。 在iOS7裡面把制定切換ViewController的行為拆分成許多Class，目的是為了要降低耦合，讓Code重用度提高，比如Coustom一個切換Animation物件可以用在好幾個ViewController之間。</p>

<p>要切換ViewController你要告訴UIKit兩件事情，顯示成怎樣<code>
UIModalPresentationStyle
</code>和過場動畫<code>Animations</code>。</p>

<h2>UIModalPresentationStyle</h2>

<p><code>UIModalPresentationStyle</code>是<code>UIViewController</code>裡的參數。定義了Presented最終呈現的樣式，比如：</p>

<ul>
<li>覆蓋全螢幕類的<code>UIModalPresentationFullScreen</code></li>
<li>iPad上常見的<code>UIModalPresentationPopover</code></li>
<li><code>UIModalPresentationCurrentContext</code>指定特定ViewController去做覆蓋</li>
<li>而我們想要的Slide Menu這樣的顯示效果不是上面幾種類型的，我們就必須要Coustom一個。也就必須實作<code>TransitioningDelegate</code>來提供下面兩種物件：

<ul>
<li><code>UIPresentationController</code></li>
<li>實作<code>UIViewControllerAnimatedTransitioning</code>的Animation</li>
</ul>
</li>
</ul>


<p>兩個物件後面會提到怎麼產生。</p>

<h2>使用Segue切換View Controller</h2>

<p>用Code寫的話常見做法是在Prestenting View Controller裡面呼叫<code>presentViewController</code>。而在這個可視化當道的年代當然要配合Storyboard搭配Segue才不會在未來多螢幕適配被淘汰掉。</p>

<p>在StoryBoard裡面拉出一條Segue，並且把Kind指定成Coustom。這樣就是告訴StoryBoard我們不用UIKit內建的展示和轉場效果，要自己建立一個Subcalss<code>UIStoryboardSegue</code>的Coustom Segue物件：</p>

<p><code>Objective-C
@interface SlideLeftCustomSegue : UIStoryboardSegue
</code>
在這裡只要實作<code>perform</code>方法，在裡面設定：</p>

<p>```Objective-C
// 系統調用prepareForSegue就是調用這裡
&ndash; (void)perform{</p>

<pre><code>UIViewController *srcViewController = (UIViewController *) self.sourceViewController;
SettingTableViewController *destViewController = (SettingTableViewController *) self.destinationViewController;

SlideMenuShowTransition *trainstionDelegate = [[SlideMenuShowTransition alloc]init];
[destViewController setTd:trainstionDelegate];

//把Presented View Controller的`ModalPresentationStyle屬性改成UIModalPresentationCustom
[destViewController setModalPresentationStyle:UIModalPresentationCustom];

//設置TransitioningDelegate。這個代理主要用來提供待會兒切換會用到的所有物件。下面會介紹到
[destViewController setTransitioningDelegate:trainstionDelegate];

//最後呼叫presentViewController，來呼叫UIKit做開始切換
[srcViewController presentViewController:destViewController animated:YES completion:nil];
</code></pre>

<p>}</p>

<p>```</p>

<h2>TransitioningDelegate</h2>

<p>當系統發現Predented View Controller指定<code>ModalPresentationStyle</code>參數為<code>UIModalPresentationCustom</code>時，就會去呼叫<code>TransitioningDelegate</code>來提供上面有提到Model切換轉場所需的相關物件：<code>UIPresentationController</code>與Animation。</p>

<p>只要創一個實作<code>TransitioningDelegate</code>的NSObject，並指定給Presented View Controller就可以了。</p>

<p>執行的時候UIKit會先抓UIPresentaionController再依照情況抓取要的Animaion物件。</p>

<ol>
<li>提交<code>UIPresentaionController</code>來決定Presented View的Final的Frame。</li>
<li>提交所有轉場，包誇Present View Controller進來, Dismiss View Controller，還有交互等等。我們這裡簡單討論Present還有Dismiss的Animation物件怎麼做。</li>
</ol>


<p>系統會先抓<code>UIPresentaionController</code>一部分是因為Animation物件需要知道Prested View Final Frame。</p>

<p>```
// present時uikit會從這裡拿資料&lt;過場動畫>
&ndash; (id<UIViewControllerAnimatedTransitioning> <em>Nullable)animationControllerForPresentedController:(UIViewController * </em>Nonnull)presented presentingController:(UIViewController * <em>Nonnull)presenting sourceController:(UIViewController * </em>Nonnull)source {</p>

<pre><code>SlideMenuAnimator *animator = [[SlideMenuAnimator alloc]init];
[animator setPresenting:YES];
return animator;
</code></pre>

<p>}</p>

<p>// dismiss時uikit會從這裡拿資料&lt;過場動畫>
&ndash; (id<UIViewControllerAnimatedTransitioning> <em>Nullable)animationControllerForDismissedController:(UIViewController * </em>Nonnull)dismissed {</p>

<pre><code>SlideMenuAnimator *animator = [[SlideMenuAnimator alloc]init];
[animator setPresenting:NO];
return animator;
</code></pre>

<p>}</p>

<p>// UIKit在切換之初從這裡要UIPresentationController
&ndash; (UIPresentationController <em>)presentationControllerForPresentedViewController:
(UIViewController </em>)presented</p>

<pre><code>                                                  presentingViewController:(UIViewController *)presenting
                                                      sourceViewController:(UIViewController *)source {

SlideMenuPresentaionController* myPresentation = [[SlideMenuPresentaionController alloc]
                                            initWithPresentedViewController:presented presentingViewController:presenting];

return myPresentation;
</code></pre>

<p>}
```</p>

<h2>UIPresentationController</h2>

<p>在iOS 7裡面引進了這個<code>UIPresentationController</code>，可以決定以下事情</p>

<ul>
<li>Set the size of the presented view controller.</li>
<li>Add custom views to change the visual appearance of the presented content.</li>
<li>Supply transition animations for any of its custom views.</li>
<li>Adapt the visual appearance of the presentation when changes occur in the app’s environment.（之後另設補充）</li>
</ul>


<p>這裡只先介紹前三項，指定Presented View Frame的方法，還有額外增加Coustom View如陰影層的方法:</p>

<p>```Objective-C
// 決定了使用UIModalPresentationCustom這樣的Model切換方式，就可以在這裡直接指定PresentedView的frame
&ndash; (CGRect)frameOfPresentedViewInContainerView {</p>

<pre><code>CGRect presentedViewFrame = CGRectZero;
CGRect containerBounds = [[self containerView] bounds];

presentedViewFrame.size = CGSizeMake(floorf(containerBounds.size.width * 0.7),
                                     containerBounds.size.height);
return presentedViewFrame;
</code></pre>

<p>}</p>

<p>// Present的時候可以增加一些Coustom View，靠animateAlongsideTransition來顯示新增的Coustom過場動畫
// 這裡用dimmingView來做Coustom View的例子
&ndash; (void)presentationTransitionWillBegin {</p>

<pre><code>self.dimmingView = [[UIView alloc]init];
[self.dimmingView setFrame:self.containerView.frame];
[self.dimmingView setBackgroundColor:[UIColor blackColor]];
[self.dimmingView setAlpha:0.3f];

// Add a custom dimming view behind the presented view controller's view
[[self containerView] addSubview:self.dimmingView];
[self.dimmingView addSubview:[[self presentedViewController] view]];
</code></pre>

<h1>pragma clang diagnostic push</h1>

<h1>pragma clang diagnostic ignored &ldquo;-Wundeclared-selector&rdquo;</h1>

<pre><code>UITapGestureRecognizer *dimmingViewSingleTap =
[[UITapGestureRecognizer alloc] initWithTarget:self.presentingViewController
                                        action:@selector(handleDimmingViewSingleTap)];
</code></pre>

<h1>pragma clang diagnostic pop</h1>

<pre><code>[self.dimmingView addGestureRecognizer:dimmingViewSingleTap];

// Fade in the dimming view during the transition.
[self.dimmingView setAlpha:0.0];
// Use the transition coordinator to set up the animations.
[[[self presentingViewController] transitionCoordinator] animateAlongsideTransition:^(id&lt;UIViewControllerTransitionCoordinatorContext&gt;  _Nonnull context) {
    [self.dimmingView setAlpha:0.55];
} completion:^(id&lt;UIViewControllerTransitionCoordinatorContext&gt;  _Nonnull context) {

}];
</code></pre>

<p>}</p>

<ul>
<li><p>(void)dismissalTransitionWillBegin {
  [[[self presentingViewController] transitionCoordinator] animateAlongsideTransition:^(id<UIViewControllerTransitionCoordinatorContext>  <em>Nonnull context) {
      [self.dimmingView setAlpha:0.0];
  } completion:^(id<UIViewControllerTransitionCoordinatorContext>  </em>Nonnull context) {</p>

<p>  }];
}</p></li>
</ul>


<p>```</p>

<h2>Animation</h2>

<p>建立一個實作<code>UIViewControllerAnimatedTransitioning</code> protocol的<code>NSObject</code>，裡面會有系統傳入的<code>UIViewControllerContextTransitioning</code>，這裡面會包含你後面要做動畫所需的所有物件。</p>

<p>主要兩個方法，一個方法專門玩動畫，一個方法單純回傳動畫所需時間。</p>

<p>我們可以把Present和Dismiss的動畫寫在一起，但<code>transitionContext</code>傳入的資訊什麼都有，就是沒有現在是Present還是Dismiss狀態的參數。</p>

<p>所以要自己設一個，並且在<code>TransitioningDelegate</code>回傳動畫方法時指定給Animation物件知道:</p>

<p><code>Objective-C
@interface SlideMenuAnimator : NSObject&lt;UIViewControllerAnimatedTransitioning&gt;
@property (nonatomic) Boolean presenting;
@end
</code></p>

<p>```Objective-C
// 這裡UIKit會給我們兩個View，包在transitionContext裡面，只要取出來玩就好了
// 這裡是真的作動畫的地方
&ndash; (void)animateTransition:(id<UIViewControllerContextTransitioning> _Nonnull)transitionContext {</p>

<pre><code>// Get the set of relevant objects.
UIView *containerView = [transitionContext containerView];
UIViewController *fromVC = [transitionContext
                            viewControllerForKey:UITransitionContextFromViewControllerKey];
UIViewController *toVC   = [transitionContext
                            viewControllerForKey:UITransitionContextToViewControllerKey];

UIView *toView = [transitionContext viewForKey:UITransitionContextToViewKey];
UIView *fromView = [transitionContext viewForKey:UITransitionContextFromViewKey];

// Set up some variables for the animation.
//CGRect containerFrame = containerView.frame;
//CGRect toViewStartFrame = [transitionContext initialFrameForViewController:toVC];
CGRect fromViewStartFrame = [transitionContext initialFrameForViewController:fromVC];
CGRect toViewFinalFrame = [transitionContext finalFrameForViewController:toVC];
CGRect fromViewFinalFrame = [transitionContext finalFrameForViewController:fromVC];

// 3. Add toVC's view to containerView
[containerView addSubview:toView];
if (self.presenting) {
    [toView setFrame:CGRectOffset(toViewFinalFrame, -1*toViewFinalFrame.size.width, 0)];
}else {
    [fromView setFrame:fromViewStartFrame];
}

// Creating the animations using Core Animation or UIView animation methods.
[UIView animateWithDuration:[self transitionDuration:transitionContext] animations:^{
    if (self.presenting) {
        toView.frame = toViewFinalFrame;
    }else {
        fromView.frame = CGRectOffset(fromViewFinalFrame, -1*fromViewFinalFrame.size.width, 0);
    }
} completion:^(BOOL finished) {
    // 3.Cleaning up and completing the transition.
    [transitionContext completeTransition:YES];
}];
</code></pre>

<p>}
```</p>

<h2>嚴謹有序的切換View Controller Flow</h2>

<p>到這邊就可以做出一個會動，有PresentingView有陰影Mask的SlideMenu了，視覺上是仿照Google Photo。基本上iOS 7所引進的這些許多新方法都是為了要解構，使之可以更容易管理，更有邏輯性。</p>

<p>有關切換ViewController來有些重要Feature，留待之後想到應用實作再增加</p>

<ul>
<li>InteractiveTransition交互動畫的部分</li>
<li>跟<code>UIPresentationController</code>適配不同場景的應用Adapting to Different Size Classes</li>
</ul>


<h3>參考資料</h3>

<p> <a href="https://developer.apple.com/videos/play/wwdc2014-228/">https://developer.apple.com/videos/play/wwdc2014-228/</a>
&ndash; <a href="http://onevcat.com/2013/10/vc-transition-in-ios7/">http://onevcat.com/2013/10/vc-transition-in-ios7/</a>
&ndash; <a href="https://developer.apple.com/library/ios/featuredarticles/ViewControllerPGforiPhoneOS/DefiningCustomPresentations.html#//apple_ref/doc/uid/TP40007457-CH25-SW1">https://developer.apple.com/library/ios/featuredarticles/ViewControllerPGforiPhoneOS/DefiningCustomPresentations.html#//apple_ref/doc/uid/TP40007457-CH25-SW1</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 大量網路與硬碟I/0處理]]></title>
    <link href="http://sah.tw/blog/2016/01/04/ios-serial-queue-run-async-background-job/"/>
    <updated>2016-01-04T15:00:00+08:00</updated>
    <id>http://sah.tw/blog/2016/01/04/ios-serial-queue-run-async-background-job</id>
    <content type="html"><![CDATA[<p>很多時候操作網路或者Disk的I/O，我們都會把工作丟到背景去執行，避免凍結使用者的畫面。但是這造成一個問題是一下子太多背景任務同時執行有可能導致APP崩潰。</p>

<p>比如影音APP使用者見獵心喜，一下子選了許多部影片要下載，如果現在把下載任務一股腦兒丟到背景，因為現在大部分下載需求都直接使用知名框架<code>AFNetworking</code>，而裡面的方法通常也都直接在背景運行，造成這些下載任務用Concurrent的方式併發執行，這下子產生大量的網路還有Disk I/O Request同時在背景跑。</p>

<p>UI是不會被凍結沒錯，但很有可能背景操作網路或Disk I/O的量太多（通常是Disk），導致APP崩潰。</p>

<h2>以Serial思維執行背景任務</h2>

<p>這時候就非常建議一次下載並儲存一部影片就好。也就是確保上個任務執行完畢，Queue在推送下一個任務去執行。</p>

<h2>混亂的完成順序</h2>

<p>直觀的實作方式就是建立一個Serial Queue，把需要列隊執行的任務用<code>dispatch_async</code>加入進去，就像以下方法：</p>

<p>```Objective-C
// 建立一個唯一的Serial Queue
dispatch_queue_t _uploadToParseInBackgroundQueue() {</p>

<pre><code>static dispatch_once_t queueCreationGuard;
static dispatch_queue_t queue;
dispatch_once(&amp;queueCreationGuard, ^{
    queue = dispatch_queue_create("com.shih.secureMedia.uploadToParseInBackgroundQueue", DISPATCH_QUEUE_SERIAL);
});
return queue;
</code></pre>

<p>}</p>

<p>// 包含一個異步方法的Method
(void)addTaskUploadMovie(NSDate *)movie
dispatch_async(_uploadToParseInBackgroundQueue(), ^{</p>

<pre><code>NSLog(@"%@上傳Start.......",movie.name);
// 某個很花時間，但本身已經是丟到背景處理的方法
[self uploadMovieInBackground:movie withCompleteBlock:^(BOOL succeeded, NSError * _Nullable error) {
    NSLog(@"%@上傳Done",movie.name);
}];
</code></pre>

<p>});
```</p>

<p>實際執行：</p>

<p><code>Objective-C
[self addTaskUploadMovie:a];
[self addTaskUploadMovie:b];
[self addTaskUploadMovie:c];
[self addTaskUploadMovie:d];
</code></p>

<p>這裡有個大問題是<code>uploadMovieInBackground</code>本身已經是跑在背景，所以四個上傳任務實際上在後台是以併發Concurrent/Parallel的方式執行。</p>

<p>而多個高I/0負載任務被同時執行就有可能造成APP崩潰。</p>

<p>實際執行結果會像這樣，但實際上不可預測，因為不能知道哪個會先完成：</p>

<p><code>
a上傳Start.......
b上傳Start.......
a上傳Done
c上傳Start.......
c上傳Done
d上傳Start.......
d上傳Done
b上傳Done
</code></p>

<h2>可控制的完成順序</h2>

<p>而如果你希望上傳程序按照以下Serial的邏輯去跑:</p>

<p><code>
a上傳Start.......
a上傳Done
b上傳Start.......
b上傳Done
c上傳Start.......
c上傳Done
d上傳Start.......
d上傳Done
</code></p>

<h3>加入<code>dispatch_suspend</code>與<code>dispatch_resume</code></h3>

<p>加入這兩個操控Queue的方法就是做兩個目的：</p>

<ul>
<li><p>當某個在Serial Queue的上傳任務Block被執行的時候，此任務在Block內馬上呼叫Queue的Suspend方法，來暫停這個Queue繼續執行下個上傳任務</p></li>
<li><p>而當前上傳任務執行完成之後，在該任務的call back block裡面馬上呼叫Queue的Resume，來讓下個上傳任務被執行</p></li>
</ul>


<p>反覆上述行為就達到我們要的一次在背景做一件事情的效果了。</p>

<p>```Objective-C
(void)addTaskUploadMovie(NSDate *)movie
dispatch_async(_uploadToParseInBackgroundQueue(), ^{</p>

<pre><code>NSLog(@"%@上傳Start.......",movie.name);
// 某個很花時間，但本身已經是丟到背景處理的metod
[self uploadMovieInBackground:movie withCompleteBlock:^(BOOL succeeded, NSError * _Nullable error) {
    NSLog(@"%@上傳Done",movie.name);

    // 這個Task執行完了，讓Queue resume，讓排在下一個的Task可以被執行
    dispatch_resume(_uploadToParseInBackgroundQueue());
}];

// 上面的uploadMovieInBackground開始後，就暫停這個Queue，不再執行Task(外部依然可以隨時用dispatch_async Passing Task)
dispatch_suspend(_uploadToParseInBackgroundQueue());
</code></pre>

<p>});
```</p>

<p><a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW14">dispatch_resume與dispatch_suspend的官方參考文件</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[推播結合背景更新 - 良好的使用者體驗]]></title>
    <link href="http://sah.tw/blog/2015/12/22/ios-background-mode-notification/"/>
    <updated>2015-12-22T20:36:49+08:00</updated>
    <id>http://sah.tw/blog/2015/12/22/ios-background-mode-notification</id>
    <content type="html"><![CDATA[<p>試想一個情境是相簿APP在後台收到伺服器傳來愛人分享的最新照片，但使用者興沖沖的打開之後面對轉阿轉不停的Loading indicator圓圈圈，多麼令人掃興。 動通知但被動下載資料顯然不是一個好方法。</p>

<p>這個時候可以透過推播通知APP，並在背景讓程式預載相片，載好之後再通知使用者點開APP，立即可以看到所有相片，多棒的使用者體驗。</p>

<p>要不打擾到使用者偷偷通知手機要實作<code>Silent Notification</code>，很簡單，只要加上<code>content-available=1</code>，再來把<code>alert</code>,<code>badge</code>,<code>sound</code>全部留空就好，並且在Xcode的Capabilities->Background Modes->Remotes Notification這裡把選項打勾。</p>

<p>這時候當手機收到有<code>content-available=1</code>的推播，iOS就會在背景喚醒你的APP，並且呼叫下面方法讓你下載資料或做些事，下次使用者打開就可以看到更新的內容了：</p>

<p>```Objective-C
&ndash; (void)application:(UIApplication * <em>Nonnull)application didReceiveRemoteNotification:(NSDictionary * </em>Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult result))handler {</p>

<p>  // 下載資料&hellip;</p>

<p>  // Local Notification提示使用者下載好囉
  UILocalNotification *locNotification = [[UILocalNotification alloc] init];</p>

<pre><code>locNotification.alertBody = @"Data have arrived!";
[[UIApplication sharedApplication]presentLocalNotificationNow:locNotification];
</code></pre>

<p>  //回調系統下載好了
  handler(UIBackgroundFetchResultNewData);
}
```</p>

<blockquote><p>&hellip;the system launches your app (or wakes it from the suspended state) and puts it in the background state when a remote notification arrives. However, the system does not automatically launch your app if the user has force-quit it. In that situation, the user must relaunch your app or restart the device before the system attempts to launch your app automatically again&hellip;&hellip;</p>

<p>As soon as you finish processing the notification, you must call the block in the handler parameter or your app will be terminated. Your app has up to 30 seconds of wall-clock time to process the notification and call the specified completion handler block&hellip;.</p></blockquote>

<p>官方文件說有例外，就是使用者曾經手動殺掉過這個APP，奇怪的是在我的開發經驗裡面，就算使用者手動殺掉系統在收到推播之後還是會去喚醒這個APP。</p>

<p>然後系統大約會給你30的時間讓你去下載需要的資料到記憶體或硬碟，之後就必須要call handler<code>UIBackgroundFetchResult</code>告訴系統已經載入完畢。</p>

<p>如果成功下載了我們要的資料，就可以發一個LocalNotification來通知使用者來享用你剛下載好的檔案，一打開就有下載好的內容，多棒的使用者體驗啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 在不同ViewController指定Status Bar]]></title>
    <link href="http://sah.tw/blog/2015/12/10/adjust-status-bar-style/"/>
    <updated>2015-12-10T01:36:49+08:00</updated>
    <id>http://sah.tw/blog/2015/12/10/adjust-status-bar-style</id>
    <content type="html"><![CDATA[<p>查看文擋很容易發現viewController有個<code>preferredStatusBarStyle</code>接口，搭配語意明顯的<code>setNeedsStatusBarAppearanceUpdate</code>，看起來可以指定回調的<code>UIStatusBarStyle</code>比如白色與黑色。但時常調用了卻沒有回應。</p>

<p>這時候查一查文擋內相同Section附近的API會是個好習慣。在Managing the Status Bar裡發現下面這個接口：</p>

<p><code>Objective-C
- (UIViewController *)childViewControllerForStatusBarStyle;
</code></p>

<p>按照苹果官方的解释：</p>

<blockquote><p>If your container view controller derives its status bar style from one of its child view controllers, implement this method and return that child view controller. If you return nil or do not override this method, the status bar style for self is used. If the return value from this method changes, call the setNeedsStatusBarAppearanceUpdate method.</p></blockquote>

<p>調用<code>setNeedsStatusBarAppearanceUpdate</code>時，系統默認會去調用application.rootViewController的<code>preferredStatusBarStyle</code>方法，所以這時候當前自己的viewController的<code>preferredStatusBarStyle</code>方法根本不會被調用。</p>

<p>這個接口很重要，這種情況下<code>childViewControllerForStatusBarStyle</code>就有用了。一般我們常用navigationController作為rootViewController，利用此接口便可以很方便自訂各個viewController的statusBarStyle。 子類化一個navigationController，並且override<code>childViewControllerForStatusBarStyle</code></p>

<p>```Objective-C
&ndash; (UIViewController * _Nullable)childViewControllerForStatusBarStyle {</p>

<pre><code>return self.topViewController;
</code></pre>

<p>}
```</p>

<p>意思就是說不要調用我自己application.rootViewController（navigationController）的<code>preferredStatusBarStyle</code>方法，去調用｀childViewControllerForStatusBarStyle｀回傳的UIViewController的<code>preferredStatusBarStyle</code>。這裡回傳self.topViewController就可以保證當前顯示的viewController的<code>preferredStatusBarStyle</code>會被系統調用且正確的顯示。</p>
]]></content>
  </entry>
  
</feed>
